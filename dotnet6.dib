#!markdown

# .NET 6 Highlights
- Supported for three years as the latest long term support (LTS) release.
- Performance is greatly improved across the board and for file I/O in particular, which together result in decreased execution time, latency, and memory use.
- C# 10 offers language improvements such as record structs, implicit using, and new lambda capabilities, while the compiler adds incremental source generators. F# 6 adds new features including Task based async, pipeline debugging and numerous performance improvements.
- Hot Reload enables you to skip rebuilding and restarting your app to view a new change — while your app is running — supported in Visual Studio 2022 and from the .NET CLI, for C# and Visual Basic.
- Cloud diagnostics have been improved with OpenTelemetry and dotnet monitor, which is now supported in production and available with Azure App Service.
- JSON APIs are more capable and have higher performance with a source generator for the serializer.
- Minimal APIs introduced in ASP.NET Core to simplify the getting started experience and improve the performance of HTTP services.
- Blazor components can now be rendered from JavaScript and integrated with existing JavaScript based apps.
- WebAssembly AOT compilation for Blazor WebAssembly (Wasm) apps, as well as support for runtime relinking and native dependencies.
- Single-page apps built with ASP.NET Core now use a more flexible pattern that can be used with Angular, React, and other popular frontend JavaScript frameworks.
- HTTP/3 has been added so that ASP.NET Core, HttpClient, and gRPC can all interact with HTTP/3 clients and servers.
- File IO now has support for symbolic links and has greatly improved performance with a re-written-from-scratch FileStream.
- Security has been improved with support for OpenSSL 3, the ChaCha20Poly1305 encryption scheme, and runtime defense-in-depth mitigations, specifically W^X and CET.
- IL trimming is now more capable and effective, with new warnings and analyzers to ensure correct final results.
- Source generators and analyzers have been added that help you produce better, safer, and higher performance code.
- Source build enables organizations like Red Hat to build .NET from source and offer their own builds to their users.

#!markdown

# Minimal API framework

#!markdown

# DateOnly and TimeOnly types
- Ignore timezones and only deal with calendar dates or time on a 24 hour clock.
- EF support is not planned until .net 7.

#!csharp

DateOnly now = DateOnly.FromDateTime(DateTime.Now);
var newYears = new DateOnly(2022, 1, 1);
// there is no "Kind" property.  
// now.Kind
display(now); 
display(newYears); 


var ptStartTime = new TimeOnly(8, 0);
display(ptStartTime); 

var ptEndTime = ptStartTime.AddHours(9);
display(ptEndTime); 

#!markdown

# Implicit global using directives
- Based on SDK.
- https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview#implicit-using-directives
- In your project file at the sdk levels and/or at individual namespace level.
- `<ImplicitUsings>enable</ImplicitUsings>`
- `<ItemGroup>
  <Using Remove="System.Threading" />
  <Using Include="Microsoft.Extensions.Logging" />`
</ItemGroup>

#!markdown

# LINQ Enhancements
- Indexing Operations on IEnumerable<T>
- Counting Operations on IEnumerable<T>
- Three-way Zip Extension Method
- Batching Sequences
- *By Operators
- OrDefault Enhancement

#!markdown

# Indexing Operations

#!csharp

// indexing operations
// public static TSource ElementAt<TSource>(this IEnumerable<TSource> source, Index index);
// public static TSource ElementAtOrDefault<TSource>(this IEnumerable<TSource> source, Index index);
// public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, Range range);

var source = Enumerable.Range(0, 100);
var elements = source.Take(range: 10..^10);
display(elements);

#!markdown

# Quick Count or default

#!csharp

var source = Enumerable.Range(0, 100);
// var normalCount = source.Count();
var found = source.TryGetNonEnumeratedCount(out var count);
display(found);
display(count);

#!markdown

# Zip 3 way

#!csharp

var set1 = Enumerable.Range(0, 10);
var set2 = Enumerable.Range(10, 10);
var set3 = Enumerable.Range(20, 7);
var zipped3 = set1.Zip(set2, set3);
display(zipped3);

#!markdown

# IEnumerable Chunk
- Replace skip + take for paging.

#!csharp

var list = Enumerable.Range(1, 100);
var chunkSize = 10;
foreach(var chunk in list.Chunk(chunkSize)) //Returns a chunk with the correct size. 
{
    display(chunk);

    foreach(var item in chunk)
    {
        display(item);
    }
}

#!markdown

# *By Operators

#!csharp

// public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector);
// public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey>? comparer);

// public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector);
// public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey>? comparer);
// public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelectorFirst);
// public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelectorFirst, IEqualityComparer<TKey>? comparer);

// public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector);
// public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey>? comparer);
// public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelectorFirst);
// public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelectorFirst, IEqualityComparer<TKey>? comparer);

// public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector);
// public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey>? comparer);

// public static TSource MinBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
// public static TSource MinBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, IComparer<TResult>? comparer);

// public static TSource MaxBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector);
// public static TSource MaxBy<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, IComparer<TResult>? comparer);

public record Person(string Name, int Age);

var people = new List<Person>
{
    new Person("John Smith", 20),
    new Person("Jane Smith", 30),
};

display(people.Max(x => x.Age)); // outputs 30
display(people.MaxBy(x => x.Age)); //Outputs Jane Smith

#!markdown

# *OrDefault

#!csharp

var hayStack = new List<int> { 1, 2, 3, 4};
var needle = 5;

// old
var foundValue = hayStack.FirstOrDefault(x => x == needle);
display(foundValue);
// new
foundValue = hayStack.FirstOrDefault(x => x == needle, 8);
display(foundValue);
